module Global where

type Solution = (String,String)

=============================================

{-# language OverloadedStrings #-}
{-# Language QuasiQuotes #-}

module TaskData where

import Data.String.Interpolate          (i)
import FlexTask.FormUtil                (getFormData)
import FlexTask.Generic.Form
import FlexTask.YesodConfig             (Rendered)
import Tasks.ComposeFormula.Config      (ComposeFormulaConfig(..), TreeDisplayMode (TreeDisplay))
import Tasks.ComposeFormula.Quiz        (generateComposeFormulaInst)
import Test.QuickCheck.Gen              (Gen)
import qualified Data.Map as Map        (fromList)
import Data.Map                         (Map)

import Tasks.SynTree.Config (
  SynTreeConfig(..)
  )
import Trees.Types (BinOp(..))

import Global

getTask :: Gen (String, String, IO ([String],String))
getTask = do
    inst <- generateComposeFormulaInst task03
    pure (show inst, checkers, getFormData form)

listToFM :: Ord k => [(k, a)] -> Map k a
listToFM = Map.fromList

-- 2024: Weight 0.33
task03 :: ComposeFormulaConfig
task03 = ComposeFormulaConfig
  { syntaxTreeConfig = SynTreeConfig
    { minNodes = 10
    , maxNodes = 14
    , minDepth = 4
    , maxDepth = 6
    , availableAtoms = "ABCDE"
    , minAmountOfUniqueAtoms = 5
    , binOpFrequencies = listToFM
      [ (And, 1)
      , (Or, 1)
      , (Impl, 1)
      , (BackImpl, 1)
      , (Equi, 1)
      ]
    , negOpFrequency = 1
    , maxConsecutiveNegations = 2
    , minUniqueBinOperators = 2
    }
  , treeDisplayModes = (TreeDisplay, TreeDisplay)
  , extraHintsOnAssociativity = False
  , extraText = Nothing
  , printSolution = True
  , offerUnicodeInput = True
  }

fields :: [[FieldInfo]]
fields = [[single "Erste Formel:", single "Zweite Formel:"]]

form :: Rendered
form = formify (Nothing :: Maybe Solution) fields

checkers :: String
checkers = [i|

{-\# language ApplicativeDo \#-}

module Check where

import Control.Monad.IO.Class           (MonadIO)
import Control.OutputCapable.Blocks
import Data.Functor                     (($>))
import Formula.Parsing.Delayed          (delayed)
import LogicTasks.Syntax.ComposeFormula (partialGrade, completeGrade)
import Tasks.ComposeFormula.Config      (ComposeFormulaInst(..))
import Trees.Types                      (BinOp(..), SynTree(..), TreeFormulaAnswer)

import Global

toListString :: (String,String) -> String
toListString (x,y) = '[' : x ++ ',' : y ++ "]"

checkSyntax
  :: (MonadIO m, OutputCapable m)
  => ComposeFormulaInst
  -> FilePath
  -> Solution
  -> LangM m
checkSyntax inst _ try = partialGrade inst $ delayed $ toListString try

checkSemantics
  :: (MonadIO m, OutputCapable m)
  => ComposeFormulaInst
  -> FilePath
  -> Solution
  -> Rated m
checkSemantics inst path try = completeGrade path inst (delayed $ toListString try) $> 1.0

|]

=============================================

{-# LANGUAGE ApplicativeDo #-}
{-# LANGUAGE RecordWildCards #-}

module Description (description) where

import Control.Monad.IO.Class                    (MonadIO)
import Control.OutputCapable.Blocks
import Tasks.ComposeFormula.Config               (ComposeFormulaInst(..))
import Trees.Types                               (BinOp(..), SynTree(..))

import qualified LogicTasks.Syntax.ComposeFormula as LT

description :: (OutputCapable m, MonadIO m) => FilePath -> ComposeFormulaInst -> LangM m
description path inst@ComposeFormulaInst{..} = do
  LT.description False (path <> "/") inst
  paragraph $ do
    translate $ do
      german "Ein Lösungsversuch könnte beispielsweise aus den folgenden beiden Eingaben bestehen: "
      english "For instance, a solution attempt could consist of the following two inputs: "
    translatedCode $ flip localise $ translations exampleCode
    pure()
  pure()
  where
    (fixedEng, fixedGer) = ("C and (A or not B)","C und (A oder nicht B)")
    exampleCode
      | unicodeAllowed = do
        english $ unlines ["(A ∨ ¬B) and C", fixedEng]
        german $ unlines ["(A ∨ ¬B) und C", fixedGer]
      | otherwise      = do
        english $ unlines ["(A or not B) and C", fixedEng]
        german $ unlines ["(A oder nicht B) und C", fixedGer]

=============================================

module Parse (parseSubmission) where


import Control.OutputCapable.Blocks (
  LangM',
  OutputCapable,
  )
import FlexTask.Generic.Parse  (parseInput, useParser)

import Global

parseSubmission :: OutputCapable m => String -> LangM' m Solution
parseSubmission = useParser parseInput
