module Global where


type Solution = (String,String)

=============================================

{-# language OverloadedStrings #-}
{-# Language QuasiQuotes #-}

module TaskData where


import Data.String.Interpolate          (i)
import FlexTask.FormUtil                (getFormData)
import FlexTask.Generic.Form
import FlexTask.YesodConfig             (Rendered)
import Tasks.ComposeFormula.Config      (ComposeFormulaInst, defaultComposeFormulaConfig)
import Tasks.ComposeFormula.Quiz        (generateComposeFormulaInst)
import Test.QuickCheck.Gen              (Gen)

import Global



getTask :: Gen (String, String, IO ([String],String))
getTask = do
    inst <- generateComposeFormulaInst defaultComposeFormulaConfig
    pure (show inst, interpolate inst, getFormData form)



fields :: [[FieldInfo]]
fields = [[single "First Formula", single "Second Formula"]]



form :: Rendered
form = formify (Nothing :: Maybe Solution) fields



interpolate :: ComposeFormulaInst -> String
interpolate inst = [i|

{-\# language ApplicativeDo \#-}

module Check where


import Control.Monad.IO.Class           (MonadIO (liftIO))
import Control.OutputCapable.Blocks
import Control.OutputCapable.Blocks.Generic.Type (
    GenericOutput
    )
import Data.Ratio
import Formula.Parsing.Delayed          (delayed)
import LogicTasks.Syntax.ComposeFormula (partialGrade, completeGrade)
import Tasks.ComposeFormula.Config      (ComposeFormulaInst(..))
import Trees.Types                      (BinOp(..), SynTree(..), TreeFormulaAnswer)

import Global


toListString :: (String,String) -> String
toListString (x,y) = '[' : x ++ ',' : y ++ "]"


checkSyntax
  :: (MonadIO m, OutputCapable m)
  => FilePath
  -> Solution
  -> LangM m
checkSyntax _ try = partialGrade inst $ delayed $ toListString try



checkSemantics
  :: (MonadIO m, OutputCapable m)
  => FilePath
  -> Solution
  -> Rated m
checkSemantics path try = completeGrade path inst (delayed $ toListString try) *> pure 1.0


inst = #{inst}
|]

=============================================

module Description (description) where


import Control.Monad.IO.Class                    (MonadIO)
import Control.OutputCapable.Blocks
import Control.OutputCapable.Blocks.Generic.Type (GenericOutput)
import Tasks.ComposeFormula.Config               (ComposeFormulaInst(..))
import Trees.Types                               (BinOp(..), SynTree(..))

import qualified LogicTasks.Syntax.ComposeFormula as LT



description :: (OutputCapable m, MonadIO m) => FilePath -> ComposeFormulaInst -> LangM m
description path inst = LT.description (path <> "/") inst

=============================================

module Parse (parseSubmission) where


import FlexTask.Generic.Parse  (Parse(parseInput))
import Text.Parsec             (ParseError, parse)

import Global



parseSubmission :: String -> Either ParseError Solution
parseSubmission = parse parseInput ""

