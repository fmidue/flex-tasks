#!/usr/bin/env expect

# GHC version to use
set ver [lindex $argv 0];
set timeout 2

log_user 0
spawn ghci-$ver Global TaskData Description Parse -Wall -Wno-orphans
log_user 1
expect_before timeout { exit 1 }

expect "GHCi, version*Ok, four modules loaded.\r"
expect "ghci> "
send "import Test.QuickCheck.Gen\r"
expect "ghci> "
send "import Data.Text (Text)\r"
expect "ghci> "
send "import FlexTask.Types (HtmlDict)\r"
expect "ghci> "
send "import Data.Tuple.Extra\r"
expect "ghci> "
send "import Data.Generics.Text\r"
expect "ghci> "
send "import Text.Parsec\r"
expect "ghci> "
send "import Control.OutputCapable.Blocks\r"
expect "ghci> "
send "import Control.OutputCapable.Blocks.Type\r"
expect "ghci> "
send "taskData <- generate TaskData.getTask\r"
expect "ghci> "
send "let taskDataTypeTest = fst3 taskData :: TaskData\r"
expect "ghci> "
send "let taskDataHasDataInstance = gshow taskDataTypeTest\r"
expect "ghci> "
send "let formTypeTest = thd3 taskData :: IO (\[Text\],HtmlDict)\r"
expect "ghci> "
send "writeFile \"Check.hs\" (snd3 taskData)\r"
expect "ghci> "
send "let descriptionTest = Description.description \"\" (undefined :: TaskData):: LangM (ReportT Output IO)\r"
expect "ghci> "
send "let parseSubmissionTest = Parse.parseSubmission \"\" :: LangM' (ReportT Output IO) Submission\r"
expect "ghci> "
send ":l Check.hs\r"
expect "\[1 of*Ok, two modules loaded.\r\n"
expect "ghci> "
send "let syntaxCheckTest = Check.checkSyntax \"\" (undefined :: TaskData) (undefined :: Submission) :: LangM (ReportT Output IO)\r"
expect "ghci> "
send "let semanticsCheckTest = Check.checkSemantics \"\" (undefined :: TaskData) (undefined :: Submission) :: Rated (ReportT Output IO)\r"
expect "ghci> "
send ":q\r"
expect "Leaving GHCi.\r\n"

