module Global where


import Trees.Types (PropFormula)



newtype Binary = Binary { unBinary :: Bool} deriving (Eq,Show)

newtype Table = Table [(Maybe (PropFormula Char), [Maybe Binary])] deriving (Eq,Show)

data Namen = A | B | C | D deriving (Eq,Enum,Bounded,Show)

type FormType = (String,[Namen])

type Submission = (Table,PropFormula Char,[Namen])

=============================================

{-# language DeriveGeneric #-}
{-# Language FlexibleContexts #-}
{-# language OverloadedStrings #-}
{-# Language QuasiQuotes #-}
{-# language TupleSections #-}

module TaskData (getTask) where


import Data.List.Split         (chunksOf)
import Data.Maybe              (fromJust)
import Data.Text               (Text)
import Data.String.Interpolate (i)
import FlexTask.FormUtil       (($$>), getFormData, newFlexId, newFlexName)
import FlexTask.Generic.Form (
  Alignment(..),
  FieldInfo,
  Formify(..),
  formify,
  formifyInstanceMultiChoice,
  single,
  buttonsEnum
  )
import FlexTask.YesodConfig    (Handler, FlexForm, Rendered)
import Test.QuickCheck.Arbitrary (arbitrary)
import Test.QuickCheck.Gen
import Yesod

import qualified Data.Text as T

import Trees.Types (PropFormula(..), BinOp(..))

import Global




instance MonadFail Gen where
  fail = error


getParticipants :: Gen [Bool]
getParticipants = vectorOf 4 arbitrary `suchThat` or


getTask :: Gen (String, String, IO ([String],String))
getTask = do
    values@[a,b,c,d] <- getParticipants
    names <- getNames
    (formula, legend, hints) <- formulaAndHints a b c d names
    let
      zipped = [(a, A), (b, B), (c, C), (d, D)]
      coming = [ n | (True,n) <- zipped ]
    pure (show (legend,hints), interpolate (formula,coming) False True, getFormData (form names))
  where
    form :: (Text,Text,Text,Text) -> Rendered
    form n = tableForm ["A","B","C","D"] 16 7 $$> formify (Nothing :: Maybe FormType) (nonTableFields n)

    getNames :: Gen (Text,Text,Text,Text)
    getNames = do
      a <- elements ["Astrid","Anna"]
      b <- elements ["Ben","Bernd"]
      c <- elements ["Claudia","Carla"]
      d <- elements ["David","Daniel"]
      return (a,b,c,d)



formulaAndHints :: Bool -> Bool -> Bool -> Bool -> (Text,Text,Text,Text) -> Gen (PropFormula Char, String, [String])
formulaAndHints a b c d (aN,bN,cN,dN) = do
    shuffled <- shuffle (zip [part1,part2,part3,part4,part5] [hint1,hint2,hint3,hint4,hint5])
    let (parts,hints) = unzip shuffled
    let formula = foldr1 (Assoc And) $ map Brackets parts
    pure (formula, namesLegend, hints)
  where
    namesLegend = [i|Sie fragt ihre Freunde #{aN} (A), #{bN} (B), #{cN} (C) und #{dN} (D), |]
    hint1 = (if b == d
              then [i|Falls #{bN} und #{dN} #{nicht b} kommen,|]
              else
                if b
                  then [i|Falls #{bN} nicht, aber #{dN} kommt,|]
                  else [i|Falls #{bN}, aber nicht #{dN} kommt,|]
            )
            ++ [i| kommt Claudia #{nicht (not c)}.|]
    hint2 = [i|#{bN} kommt #{nicht b} mit, wenn #{aN} #{nicht a} mitkommt.|]
    hint3 = [i|Wenn #{bN} #{nicht b} kommt, kommt #{if b == c then auch else ""} #{cN} #{nicht c}.|]
    hint4 = [i|Wenn #{cN} #{nicht c} kommt, kommt #{if c == d then auch else ""} #{dN} #{nicht d}.|]
    hint5 = [i|Wenn #{dN} #{nicht d} kommt, |]
         ++ if a == b
              then [i|kommen #{if d == a then auch else ""} #{aN} oder #{bN} #{nicht a}.|]
              else
                if a
                  then [i|kommt #{if d then auch else ""} #{aN} nicht oder #{bN} kommt.|]
                  else [i|kommt #{if d then "" else auch} #{aN} oder #{bN} kommt nicht.|]

    nicht :: Bool -> String
    nicht f = if f then "nicht" else ""
    -- to avoid inline type annotations due to String vs Text
    auch :: String
    auch = " auch"

    neg b x = if b then Neg (Atomic x) else Atomic x
    part1 = Assoc Impl
             (Brackets $ Assoc And (neg b 'B') (neg d 'D'))
             (neg (not c) 'C')
    part2 = Assoc Impl (neg a 'A') (neg b 'B')
    part3 = Assoc Impl (neg b 'B') (neg c 'C')
    part4 = Assoc Impl (neg c 'C') (neg d 'D')
    part5 = Assoc Impl
             (neg d 'D')
             (Brackets $ Assoc Or (neg a 'A') (neg b 'B'))



tableForm :: [Text] -> Int -> Int -> Rendered
tableForm staticHeaders rowAmount columnAmount extra = do
    let addCssClass fs = fs {fsAttrs = addClass "tableInput" (fsAttrs fs)}
        addFieldAttrs t = (fieldSettingsLabel t) {fsName = Just t}

        tableTextField :: Text -> MForm Handler (FormResult (Maybe Text),FieldView FlexForm)
        tableTextField t = mopt textField (addCssClass (addFieldAttrs t)) Nothing

        headerList = replicate (columnAmount - length staticHeaders) "headers"
        cellList = replicate (rowAmount*columnAmount) "cells"

    headersRes <- traverse tableTextField headerList
    columnsRes <- traverse tableTextField cellList
    let headers = map snd headersRes
        rows = chunksOf columnAmount $ map snd columnsRes
    pure ( ["headers","cells"]
         , [whamlet|
             <style>
               .tableInput {
                 width: 100%;
               }
               table, th, td {
                 border: 1px solid black;
                 border-collapse: collapse;

               }
               table {
                 width: 100%;
               }
             #{extra}
             <table>
               <tr>
                 $forall sh <- staticHeaders
                   <th>#{sh}
                 $forall header <- headers
                   <th>^{fvInput header}
               $forall row <- rows
                 <tr>
                   $forall input <- row
                     <td>^{fvInput input}|]
         )




nonTableFields :: (Text,Text,Text,Text) -> [[FieldInfo]]
nonTableFields (a,b,c,d) = [[single "Formel"], [buttonsEnum Vertical "Wer kommt?" (fromJust . flip lookup nameMatching)]]
  where
    nameMatching = [(A, a), (B, b), (C, c), (D, d)]



instance Formify [Namen] where
  formifyImplementation = formifyInstanceMultiChoice



pShow :: PropFormula Char -> String
pShow (Atomic c) = "Atomic " ++ show c
pShow (Neg f) = "Neg " ++ '(' : pShow f ++ ")"
pShow (Brackets f) = "Brackets " ++ '(' : pShow f ++ ")"
pShow (Assoc o f1 f2) = "Assoc " ++ show o ++ withParens f1 ++ withParens f2
  where
    withParens x = ' ' : '(' : pShow x ++ ")"



interpolate :: (PropFormula Char, [Namen]) -> Bool -> Bool -> String
interpolate (fSol,nSol) tableRequired showSolution = [i|

{-\# language ApplicativeDo \#-}
{-\# language OverloadedStrings \#-}

module Check (checkSemantics, checkSyntax) where


import Control.Monad (when, unless)
import Control.OutputCapable.Blocks
import Control.OutputCapable.Blocks.Generic.Type (
    GenericOutput(..)
    )
import Data.Char     (digitToInt)
import Data.Foldable (toList)
import Data.Functor  (($>))
import Data.List     (isInfixOf, transpose)
import Data.Maybe    (catMaybes, fromJust, isJust)
import Data.Map      ((!), fromList)
import Data.Ratio    (Ratio, (%))
import Data.Tuple    (swap)
import Numeric       (showBin)
import Text.Parsec   (ParseError)

import LogicTasks.Formula (isSemanticEqual, ToSAT(..))
import Trees.Types (PropFormula(..), BinOp(..))

import qualified SAT.MiniSat as Sat
import qualified Data.Text   as T

import Global
import Parse         (parseSubmission)




correctColumn :: (PropFormula Char,[Maybe Binary]) -> Bool
correctColumn (f,bs) = all lookFor allocationsAndValues
  where
    ones = Sat.solve_all $ convert f
    allocations = map (zip (toList f) . map (unBinary . fromJust)) $ transpose startingTable
    allocationsAndValues = [(unBinary a,b) | (Just a,b) <- zip bs allocations]
    lookFor (True,a) = fromList a `elem` ones
    lookFor (False,a) = fromList a `notElem` ones



isSubFormula :: PropFormula Char -> PropFormula Char -> Bool
isSubFormula a b = noSpaces a `isInfixOf` noSpaces b
  where
    noSpaces = filter (/=' ') . show



-- Not available in logic-tasks
-- needed for equivalence test without excessive brackets in formulas
instance ToSAT (PropFormula Char) where
   convert (Atomic c) = Sat.Var c
   convert (Neg p) = Sat.Not (convert p)
   convert (Brackets p) = convert p
   convert (Assoc op l r) = convertBinOp op left right
     where
       (left, right) = (if op == BackImpl then swap else id) (convert l, convert r)
       convertBinOp And = (Sat.:&&:)
       convertBinOp Or = (Sat.:||:)
       convertBinOp Impl = (Sat.:->:)
       convertBinOp BackImpl = (Sat.:->:)
       convertBinOp Equi = (Sat.:<->:)



checkSyntax :: OutputCapable m => FilePath -> Either ParseError Submission -> LangM m
checkSyntax _ (Left err) = refuse $ code $ show err
checkSyntax _ (Right (Table xs,f,n)) = do
    assertion (all (`notElem` map (Just . Atomic) "ABCD") nonStaticHeaders) $ translate $
      german "Tabellenspalten existieren nur einmal?."
    assertion (not (null n)) $ translate $
      german "Es wurden Namen angekreuzt? (Alleine gehen ist ausgeschlossen)"
    pure ()
  where
    nonStaticHeaders = drop 4 $ map fst xs



checkSemantics :: OutputCapable m => FilePath -> Either ParseError Submission -> Rated m
checkSemantics _ (Left err) = refuse (code $ show err) $> 0
checkSemantics _ (Right (Table xs,f,n)) = do
    let correctStart = take 4 columns == startingTable
    #{checkType} correctStart $ translate $
          german "Spalten der atomaren Formeln ergeben sinnvolle Wahrheitstabelle?"
    let subFormulas = all (`isSubFormula` f) $ catMaybes nonStaticHeaders
    #{checkType} subFormulas $ translate $
          german "Tabellenspalten sind Teilformeln der Gesamtformel?"
    let correctValues = all correctColumn [(f,b)| (Just f,b) <- drop 4 xs]
    #{checkType} correctValues $ translate $
          german "Tabellenspalten enthalten korrekte Warheitswerte?"
    yesNo (T.all (`elem` f) "ABCD") $ translate $
          german "Formel enthÃ¤lt alle vorkommenden Literale?"
    let correctFormula = isSemanticEqual (#{pShow fSol}) f
    yesNo correctFormula $ translate $
          german "Die aussagenlogische Formel ist korrekt?"
    let correctNames = n == #{nSol}
    yesNo correctNames $ translate $
          german "Die Liste der Teilnehmer ist korrekt?"
    let correct = filter (==True) [correctStart, correctFormula, correctNames, correctValues]
    let points = fromIntegral (length correct) % 4
    res <- printSolutionAndAssert IndefiniteArticle maybeAnswer points
    pure res
  where
    (headers,columns) = unzip xs
    nonStaticHeaders = drop 4 headers
    maybeAnswer = if #{showSolution} then Just ("Formel:  " ++ #{show $ show fSol} ++ "\\nEs kommt: " ++ #{show $ show nSol})
                                     else Nothing



startingTable :: [[Maybe Binary]]
startingTable = map (Just . Binary . toEnum . digitToInt) . T.unpack <$>
  T.transpose (T.justifyRight 4 '0' . T.pack . (`showBin` "") <$> [0..15])

|]
  where
    checkType :: String
    checkType = if tableRequired then "assertion" else "yesNo"

=============================================

{-# Language ApplicativeDo #-}

module Description (description) where


import Control.OutputCapable.Blocks
import Control.OutputCapable.Blocks.Generic.Type (GenericOutput)
import Data.String.Interpolate                   (i)

import Global



description :: OutputCapable m => FilePath -> (String,[String]) -> LangM m
description _ (legend,hints) = do
    paragraph $ translate $ german
      ( "Eva mÃ¶chte gerne auf ein Konzert ihrer Lieblingsband gehen. " ++
        legend ++
        "ob sie mitkommen wollen. Leider sind die Antworten etwas seltsam."
      )
    itemizeM $ map (translate . german) hints
    paragraph $ translate $ german
      "Ãbersetzen Sie die Aussagen in eine aussagenlogische Formel. Geben Sie diese Formel in das gleichnamige Textfeld ein."
    paragraph $ translate $ german
      "Wer geht mit Eva zum Konzert? BegrÃ¼nden Sie Ihr Ergebnis systematisch. Kreuzen Sie dafÃ¼r alle KonzertgÃ¤nger in der Namensliste an."
    paragraph $ translate $ german
      "Verwenden Sie fÃ¼r die Angabe der Formel die atomaren Formeln A,B,C,D und die folgenden Operatoren:"
    enumerateM code $ zip ["Negation","Und","Oder","Implikation","Biimplikation"] $ map code ["Â¬","â§","â¨","=>","<=>"]
    pure ()


=============================================

module Parse (parseSubmission) where


import Data.Char               (showLitChar)
import Data.String.Interpolate (i)
import Data.Text               (Text)
import Data.List               (transpose)
import Data.List.Split         (chunksOf)
import FlexTask.Generic.Parse (
  Parse(..),
  parseInstanceMultiChoice,
  escaped
  )
import Text.Parsec (
  (<|>),
  ParseError,
  choice,
  many1,
  parse,
  string,
  try
  )
import Text.Parsec.Char       (char, oneOf)
import Text.Parsec.String     (Parser)

import Trees.Types (PropFormula(..))
import Trees.Parsing ()

import qualified Data.Text as T
import qualified Formula.Parsing as FP

import Global



instance Parse Binary where
  parseInput = escaped $ do
    val <- string "0" <|> string "1"
    pure $ Binary $ toEnum $ read val


instance Parse (PropFormula Char) where
  parseInput = escaped FP.parser


instance Parse [Namen] where
  parseInput = parseInstanceMultiChoice



instance Parse Table where
  parseInput = do
    (headers,values) <- parseInput
    let allHeaders = map (Just . Atomic) "ABCD" ++ headers
    pure $ Table $ zip allHeaders $ transpose $ chunksOf 7 values



parseSubmission :: String -> Either ParseError Submission
parseSubmission = parse parseInput ""
