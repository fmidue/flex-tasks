
interpolate solution = [i|


import Control.Monad                     (when, unless)
import Control.Monad.Output
import Control.Monad.Output.Generic.Type (GenericOutput)
import Data.Ratio


checkSyntax :: OutputMonad m => FilePath -> Either ParseError Solution -> LangM m
checkSyntax _ (Left err) = refuse $ code $ show err
checkSyntax _ _          = pure ()


checkSemantics :: OutputMonad m => FilePath -> Either ParseError Solution -> Rated m
checkSemantics _ (Left err) = refuse (code $ show err) *> pure 0.0
checkSemantics _ (Right (s,p)) = do
    unless (s == getSum sol) $ do
      refuse $ text $ "Nein"
    unless (p == getProd sol) $ do
      refuse $ text $ "Nein"
    pure 1.0


sol = #{solution}
|]


